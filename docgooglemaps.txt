import React, {useState} from 'react';
import {createRoot} from 'react-dom/client';
import {APIProvider, ControlPosition, Map} from '@vis.gl/react-google-maps';

import ControlPanel from './control-panel';
import {CustomMapControl} from './map-control';
import MapHandler from './map-handler';

const API_KEY =
  globalThis.GOOGLE_MAPS_API_KEY ?? (process.env.GOOGLE_MAPS_API_KEY as string);

export type AutocompleteMode = {id: string; label: string};

const autocompleteModes: Array<AutocompleteMode> = [
  {id: 'classic', label: 'Google Autocomplete Widget'},
  {id: 'custom', label: 'Custom Build'},
  {id: 'custom-hybrid', label: 'Custom w/ Select Widget'}
];

const App = () => {
  const [selectedAutocompleteMode, setSelectedAutocompleteMode] =
    useState<AutocompleteMode>(autocompleteModes[0]);

  const [selectedPlace, setSelectedPlace] =
    useState<google.maps.places.PlaceResult | null>(null);

  return (
    <APIProvider apiKey={API_KEY}>
      <Map
        defaultZoom={3}
        defaultCenter={{lat: 22.54992, lng: 0}}
        gestureHandling={'greedy'}
        disableDefaultUI={true}
      />

      <CustomMapControl
        controlPosition={ControlPosition.TOP}
        selectedAutocompleteMode={selectedAutocompleteMode}
        onPlaceSelect={setSelectedPlace}
      />

      <ControlPanel
        autocompleteModes={autocompleteModes}
        selectedAutocompleteMode={selectedAutocompleteMode}
        onAutocompleteModeChange={setSelectedAutocompleteMode}
      />

      <MapHandler place={selectedPlace} />
    </APIProvider>
  );
};

export default App;

export function renderToDom(container: HTMLElement) {
  const root = createRoot(container);

  root.render(<App />);
}
// NOTE: This requires the alpha version of the Maps JavaScript API and is not yet
// recommended to be used in production applications. We will add this to the example map
// when it reaches GA (General Availability). Treat this as a preview of what's to come.

import React, {useRef, useEffect, useState} from 'react';
import {useMapsLibrary} from '@vis.gl/react-google-maps';

interface Props {
  onPlaceSelect: (place: google.maps.places.PlaceResult | null) => void;
}

// This is an example of the new "PlaceAutocomplete" widget.
// https://developers.google.com/maps/documentation/javascript/place-autocomplete-new
export const PlaceAutocompleteNew = ({onPlaceSelect}: Props) => {
  const [placeAutocomplete, setPlaceAutocomplete] = useState<Node | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const places = useMapsLibrary('places');

  useEffect(() => {
    if (!places) return;
    // @ts-expect-error Using an alpha feature here. The types are not up to date yet
    setPlaceAutocomplete(new places.PlaceAutocompleteElement());
  }, [places]);

  useEffect(() => {
    if (!placeAutocomplete) return;

    placeAutocomplete.addEventListener(
      'gmp-placeselect',
      // @ts-expect-error This new event has no types yet
      async ({place}: {place: google.maps.places.Place}) => {
        await place.fetchFields({
          fields: ['displayName', 'formattedAddress', 'location', 'viewport']
        });

        onPlaceSelect(place.toJSON());
      }
    );

    containerRef.current?.appendChild(placeAutocomplete);
  }, [onPlaceSelect, placeAutocomplete]);

  return <div className="autocomplete-container" ref={containerRef} />;
};
import React, {useRef, useEffect, useState} from 'react';
import {useMapsLibrary} from '@vis.gl/react-google-maps';

interface Props {
  onPlaceSelect: (place: google.maps.places.PlaceResult | null) => void;
}

// This is an example of the classic "Place Autocomplete" widget.
// https://developers.google.com/maps/documentation/javascript/place-autocomplete
export const PlaceAutocompleteClassic = ({onPlaceSelect}: Props) => {
  const [placeAutocomplete, setPlaceAutocomplete] =
    useState<google.maps.places.Autocomplete | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const places = useMapsLibrary('places');

  useEffect(() => {
    if (!places || !inputRef.current) return;

    const options = {
      fields: ['geometry', 'name', 'formatted_address']
    };

    setPlaceAutocomplete(new places.Autocomplete(inputRef.current, options));
  }, [places]);

  useEffect(() => {
    if (!placeAutocomplete) return;

    placeAutocomplete.addListener('place_changed', () => {
      onPlaceSelect(placeAutocomplete.getPlace());
    });
  }, [onPlaceSelect, placeAutocomplete]);

  return (
    <div className="autocomplete-container">
      <input ref={inputRef} />
    </div>
  );
};

import * as React from 'react';
import {AutocompleteMode} from './app';

interface Props {
  autocompleteModes: Array<AutocompleteMode>;
  selectedAutocompleteMode: AutocompleteMode;
  onAutocompleteModeChange: (autocompleteMode: AutocompleteMode) => void;
}

function ControlPanel({
  autocompleteModes,
  selectedAutocompleteMode,
  onAutocompleteModeChange
}: Props) {
  return (
    <div className="control-panel">
      <h3>Autocomplete Example</h3>

      <p>
        This example demonstrates three different methods of adding autocomplete
        functionality to your appplication using the Google Places API.
      </p>

      <div className="autocomplete-mode">
        <h4>Choose the example style: </h4>
        <select
          value={selectedAutocompleteMode.id}
          onChange={event => {
            const newMode = autocompleteModes.find(
              mode => mode.id === event.target.value
            );
            if (newMode) {
              onAutocompleteModeChange(newMode);
            }
          }}>
          {autocompleteModes.map(({id, label}) => (
            <option key={id} value={id}>
              {label}
            </option>
          ))}
        </select>
      </div>

      {selectedAutocompleteMode.id === 'classic' && (
        <div>
          This is the easiest to setup. You only need an input element and
          Google handles the rest.
        </div>
      )}
      {selectedAutocompleteMode.id === 'custom' && (
        <div>
          This is the most flexible solution, but also requires quite a bit
          effort to get right. The example only implements a basic working
          version for demonstration purposes.
        </div>
      )}
      {selectedAutocompleteMode.id === 'custom-hybrid' && (
        <div>
          This has the benefits of custom look, feel and solid UX out of the
          box, but you still have to manage the prediction and details fetching
          as well as the session yourself.
        </div>
      )}
      <div className="links">
        <a
          href="https://codesandbox.io/s/github/visgl/react-google-maps/tree/main/examples/autocomplete"
          target="_new">
          Try on CodeSandbox ↗
        </a>

        <a
          href="https://github.com/visgl/react-google-maps/tree/main/examples/autocomplete"
          target="_new">
          View Code ↗
        </a>
      </div>
    </div>
  );
}

export default React.memo(ControlPanel);

import React from 'react';
import {ControlPosition, MapControl} from '@vis.gl/react-google-maps';

import {PlaceAutocompleteClassic} from './autocomplete-classic';
import {AutocompleteCustom} from './autocomplete-custom';

import {AutocompleteCustomHybrid} from './autocomplete-custom-hybrid';
import type {AutocompleteMode} from './app';

type CustomAutocompleteControlProps = {
  controlPosition: ControlPosition;
  selectedAutocompleteMode: AutocompleteMode;
  onPlaceSelect: (place: google.maps.places.PlaceResult | null) => void;
};

export const CustomMapControl = ({
  controlPosition,
  selectedAutocompleteMode,
  onPlaceSelect
}: CustomAutocompleteControlProps) => {
  const {id} = selectedAutocompleteMode;

  return (
    <MapControl position={controlPosition}>
      <div className="autocomplete-control">
        {id === 'classic' && (
          <PlaceAutocompleteClassic onPlaceSelect={onPlaceSelect} />
        )}

        {id === 'custom' && (
          <AutocompleteCustom onPlaceSelect={onPlaceSelect} />
        )}

        {id === 'custom-hybrid' && (
          <AutocompleteCustomHybrid onPlaceSelect={onPlaceSelect} />
        )}
      </div>
    </MapControl>
  );
};

import {useMap} from '@vis.gl/react-google-maps';
import React, {useEffect} from 'react';

interface Props {
  place: google.maps.places.PlaceResult | null;
}

const MapHandler = ({place}: Props) => {
  const map = useMap();

  useEffect(() => {
    if (!map || !place) return;

    if (place.geometry?.viewport) {
      map.fitBounds(place.geometry?.viewport);
    }
  }, [map, place]);

  return null;
};

export default React.memo(MapHandler);


